多态的表现

 class Person{
      public int num=100;

      public void show(){
        System.out.println("打印Person");
      }

      public static void fun(){
              System.out.println("打印 static Person");
         }
 }

 class Son extends Person{
        public int num=200;

        public void show(){
                System.out.println("打印Son");
              }


          public static void fun(){
                       System.out.println("打印 static Son");
                  }
 }

 class Test{

    public static void main(String[] args){
        //多态中对成员变量的访问
        Person p= new Son();
        System.out.print(p.num);//此刻这里运行的结果是:100 总而得出结论，多态中访问变量的时候编译看左边，运行看左边

        //多态中对成员方法的访问
        p.show();//这里多态访问成员方法，运行结果是:打印Son，因为在继承中，子类重写了父类的方法，因此多态中访问成员方法的时候，编译看左边，运行看右边


        //多态中对静态方法的访问

        p.fun();//这里多态访问成员的静态方法，运行结果打印的是：打印 static Person ，因为static方法是与类相关的，从而是编译看左边，运行看左边







    }
 }